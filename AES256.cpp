#include "AES256.hpp"

typedef unsigned char byte;

byte const s_sbox[] =
{
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
	0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
	0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
	0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
	0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
	0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
	0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
	0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
	0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
	0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
	0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
	0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
	0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
	0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
	0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
	0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
	0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};

byte const s_inv_sbox[] =
{
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38,
	0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87,
	0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d,
	0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2,
	0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16,
	0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,
	0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a,
	0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02,
	0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea,
	0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85,
	0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89,
	0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20,
	0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31,
	0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d,
	0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0,
	0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26,
	0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};

void expand_enc_key(byte key[32], byte &rcon)
{
	key[0] ^= s_sbox[key[29]] ^ rcon;
	key[1] ^= s_sbox[key[30]];
	key[2] ^= s_sbox[key[31]];
	key[3] ^= s_sbox[key[28]];

	rcon <<= 1;

	for (byte i = 4; i < 16; ++i)
		key[i] ^= key[i - 4];

	for (byte i = 16; i < 20; ++i)
		key[i] ^= s_sbox[key[i - 4]];

	for (byte i = 20; i < 32; ++i)
		key[i] ^= key[i - 4];
}

byte rj_xtime(byte x)
{
	return (x & 0x80) ? ((x << 1) ^ 0x1b) : (x << 1);
}

void mix_columns(byte buf[16])
{
	byte * b = buf;

	for (byte i = 0; i < 4; ++i)
	{
		byte tmp[4];
		std::copy(b, b + 4, tmp);

		byte m = b[0] ^ b[1] ^ b[2] ^ b[3];

		for (byte j = 0; j < 4; ++j)
			*b++ ^= m ^ rj_xtime(tmp[j] ^ tmp[(j + 1) & 3]);
	}
}

void shift_rows(byte buf[16])
{
	byte tmp;

	tmp = buf[1];
	buf[1] = buf[5];
	buf[5] = buf[9];
	buf[9] = buf[13];
	buf[13] = tmp;

	tmp = buf[10];
	buf[10] = buf[2];
	buf[2] = tmp;

	tmp = buf[3];
	buf[3] = buf[15];
	buf[15] = buf[11];
	buf[11] = buf[7];
	buf[7] = tmp;

	tmp = buf[14];
	buf[14] = buf[6];
	buf[6] = tmp;
}

void sub_bytes(byte buf[16])
{
	for (byte i = 0; i < 16; ++i)
		buf[i] = s_sbox[buf[i]];
}

void add_round_key(byte buf[16], const byte key[16])
{
	for (int i = 0; i < 16; i++)
		buf[i] ^= key[i];
}

void encrypt(byte buf[16], byte key[32])
{
	add_round_key(buf, key);
	byte rcon = 1;

	for (byte i = 1; i < 14; ++i)
	{
		sub_bytes(buf);
		shift_rows(buf);
		mix_columns(buf);

		if (i & 1)
		{
			add_round_key(buf, key + 16);
		}
		else
		{
			expand_enc_key(key, rcon);
			add_round_key(buf, key);
		}
	}

	sub_bytes(buf);
	shift_rows(buf);
	expand_enc_key(key, rcon);
	add_round_key(buf, key);
}

void cbc(byte buf[16], byte key[32], byte IV[16])
{
	for (int i = 0; i < 16; i++)
		buf[i] ^= IV[i];
	encrypt(buf, key);
	for (int i = 0; i < 16; i++)
		IV[i] = buf[i];
}

void inv_mix_columns(byte buf[16])
{
	byte * b = buf;

	for (byte i = 0; i < 4; ++i)
	{
		byte tmp[4];
		std::copy(b, b + 4, tmp);

		byte m1 = b[0] ^ b[1] ^ b[2] ^ b[3];
		byte m2 = rj_xtime(m1);

		byte m3[2];
		m3[0] = m1 ^ rj_xtime(rj_xtime(m2 ^ tmp[0] ^ tmp[2]));
		m3[1] = m1 ^ rj_xtime(rj_xtime(m2 ^ tmp[1] ^ tmp[3]));

		for (byte j = 0; j < 4; ++j)
			*b++ ^= m3[j & 1] ^ rj_xtime(tmp[j] ^ tmp[(j + 1) & 3]);
	}
}

void expand_dec_key(byte key[32], byte & rcon)
{
	for (byte i = 31; i >= 20; --i)
		key[i] ^= key[i - 4];

	for (byte i = 19; i >= 16; --i)
		key[i] ^= s_sbox[key[i - 4]];

	for (byte i = 15; i >= 4; --i)
		key[i] ^= key[i - 4];

	rcon >>= 1;

	key[0] ^= s_sbox[key[29]] ^ rcon;
	key[1] ^= s_sbox[key[30]];
	key[2] ^= s_sbox[key[31]];
	key[3] ^= s_sbox[key[28]];
}

void inv_sub_bytes(byte buf[16])
{
	for (byte i = 0; i < 16; ++i)
		buf[i] = s_inv_sbox[buf[i]];
}

void inv_shift_rows(byte buf[16])
{
	byte tmp;

	tmp = buf[1];
	buf[1] = buf[13];
	buf[13] = buf[9];
	buf[9] = buf[5];
	buf[5] = tmp;

	tmp = buf[2];
	buf[2] = buf[10];
	buf[10] = tmp;

	tmp = buf[3];
	buf[3] = buf[7];
	buf[7] = buf[11];
	buf[11] = buf[15];
	buf[15] = tmp;

	tmp = buf[6];
	buf[6] = buf[14];
	buf[14] = tmp;
}

void decrypt(byte buf[16], byte key[32])
{
	add_round_key(buf, key);
	inv_shift_rows(buf);
	inv_sub_bytes(buf);

	byte rcon = 0x80;

	for (byte i = 1; i < 14; ++i)
	{
		if (i & 1)
		{
			expand_dec_key(key, rcon);
			add_round_key(buf, key + 16);
		}
		else
			add_round_key(buf, key);

		inv_mix_columns(buf);
		inv_shift_rows(buf);
		inv_sub_bytes(buf);
	}

	add_round_key(buf, key);
}

void cbc_inv(byte buf[16], byte key[32], byte IV[16])
{
	byte tmp[16];
	for (int i = 0; i < 16; i++)
		tmp[i] = buf[i];

	decrypt(buf, key);
	for (int i = 0; i < 16; i++)
		buf[i] ^= IV[i];
	for (int i = 0; i < 16; i++)
		IV[i] = tmp[i];
}

std::string AES256_Encrypt(std::string const & plaintext, std::string const & key)
{
	std::string result;
	std::string data = plaintext;

	// Create random IV
	byte IV[16];
	for (int i = 0; i < 16; i++)
	{
		IV[i] = rand() % 256;
		result += ((char)IV[i]);
	}

	// Add PKCS#7 padding
	unsigned int size = data.size();
	unsigned int pad_len = 16 - (size % 16);
	for (unsigned int i = 0; i < pad_len; i++) data += (char)pad_len;

	// Encrypt data
	for (size_t i = 0; i < size; i += 16)
	{
		// Copy encoding key
		byte enc_key[32];
		for (int o = 0; o < 32; o++)
			enc_key[o] = key[o];

		// Get next block
		byte buf[16];
		for (int o = 0; o < 16; o++)
			buf[o] = data[o + i];

		// Encrypt
		cbc(buf, enc_key, IV);

		// Append to result
		for (int o = 0; o < 16; o++)
			result += (char)buf[o];
	}

	return result;
}

std::string AES256_Decrypt(std::string const & data, std::string const & key)
{
	std::string result;
	unsigned int size = data.length();

	// Check data length
	if (size <= 16 || size % 16 != 0)
		return "Invalid data";

	// Get IV
	byte IV[16];
	for (int i = 0; i < 16; i++)
		IV[i] = data[i];

	// Generate decoding key
	byte rcon = 1;
	byte dec_key2[32];
	for (int i = 0; i < 32; i++)
		dec_key2[i] = key[i];
	while (rcon != 0x80)
		expand_enc_key(dec_key2, rcon);

	// Decrypt data
	for (size_t i = 16; i < size; i += 16)
	{
		// Copy decoding key
		byte dec_key[32];
		for (int o = 0; o < 32; o++)
			dec_key[o] = dec_key2[o];

		// Get block to decrypt
		byte buf[16];
		for (int o = 0; o < 16; o++)
			buf[o] = data[o + i];

		// Decrypt block
		cbc_inv(buf, dec_key, IV);

		// Add block to result
		for (int o = 0; o < 16; o++)
			result += (char)buf[o];
	}

	// Remove PKCS#7 padding
	int res_len = result.length();
	int pad_len = (int)result[res_len - 1];
	if (res_len - pad_len < 0)
		return "Invalid data";
	result.erase(res_len - pad_len, pad_len);

	return result;
}